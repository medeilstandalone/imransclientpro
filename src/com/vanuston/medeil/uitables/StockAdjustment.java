/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StockAdjustment.java
 *
 * Created on Feb 5, 2014, 11:14:11 AM
 */

package com.vanuston.medeil.uitables;

import com.vanuston.medeil.client.RegistryFactory;
import com.vanuston.medeil.implementation.Stock;
import com.vanuston.medeil.model.StockModel;
import com.vanuston.medeil.util.Logger;
import com.vanuston.medeil.util.RegistryConstants;
import com.vanuston.medeil.util.Validation;
import com.vanuston.medeil.util.Value;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javafx.stage.Alert;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author muralikrishnan
 */
public class StockAdjustment extends javax.swing.JDialog {
    /** Creates new form StockAdjustment */
    static Logger log = Logger.getLogger(StockStatementTable.class, "Utilities");
    public StockAdjustment() {
         initComponents();
         setModal(true);
         Integer[] colWidth = {45, 130, 40, 80, 60, 79, 79, 84, 100, 105, 100, 125, 0};
         for (int i = 0; i < 13; i++) {
                jStkAdjust.getColumnModel().getColumn(i).setPreferredWidth(colWidth[i]);
         }
         jStkAdjust.removeColumn(jStkAdjust.getColumnModel().getColumn(12));
         jStkAdjust.setSelectionMode(0);
         jStkAdjust.getTableHeader().setReorderingAllowed(false);
         jStkAdjust.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));         
         InputMap im = jPanel1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
         im.put(KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0),"save");
         ActionMap ac = jPanel1.getActionMap();
         ac.put("save", new AbstractAction("save") {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    saveStockAdjustment();
                }
            });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbSearchBox = new javax.swing.JComboBox();
        btnSearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtStkSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jStkAdjust = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        lblActualStk = new javax.swing.JLabel();
        lblPhysicalStk = new javax.swing.JLabel();
        lblAdjustedStk = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblTotalRecords = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Stock Adjustment");
        setResizable(false);

        jLabel1.setText("SEARCH BY");

        cmbSearchBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Product Name", "Product Code", "Batch Number", "Quantity" }));
        cmbSearchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSearchBoxKeyPressed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchMouseClicked(evt);
            }
        });
        btnSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSearchKeyPressed(evt);
            }
        });

        jLabel2.setText("SEARCH TEXT");

        txtStkSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStkSearchKeyPressed(evt);
            }
        });

        jScrollPane2.setAutoscrolls(true);

        jStkAdjust.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Code", "Item Name", "Type", "Batch No.", "Expiry ", "Actual Stk", "Physical Stk", "Adjusted Stk", "Actual Stk Value", "Physical Stk Value", "Adjusted Stk Value", "Remarks", "mrp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jStkAdjust.setDragEnabled(true);
        jStkAdjust.setGridColor(new java.awt.Color(204, 204, 255));
        jStkAdjust.setRowHeight(20);
        jStkAdjust.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jStkAdjust.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jStkAdjustKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jStkAdjust);
        jStkAdjust.getColumnModel().getColumn(12).setResizable(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(99, 99, 99)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(3, 3, 3)
                        .add(txtStkSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cmbSearchBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnSearch))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 982, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSearch)
                    .add(cmbSearchBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2)
                    .add(jLabel1)
                    .add(txtStkSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("TOTAL AMOUNT");

        lblActualStk.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblActualStk.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblActualStk.setText("0.00");

        lblPhysicalStk.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblPhysicalStk.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPhysicalStk.setText("0.00");

        lblAdjustedStk.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblAdjustedStk.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAdjustedStk.setText("0.00");

        jButton1.setText("Adjust Stock [F3]");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        lblTotalRecords.setFont(new java.awt.Font("Tahoma", 1, 14));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblActualStk, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblPhysicalStk, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblAdjustedStk, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(159, 159, 159))))
            .add(layout.createSequentialGroup()
                .add(29, 29, 29)
                .add(lblTotalRecords, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(143, 143, 143)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(505, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(lblPhysicalStk)
                    .add(lblActualStk)
                    .add(lblAdjustedStk))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(lblTotalRecords))
                .add(10, 10, 10))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1030)/2, (screenSize.height-439)/2, 1030, 439);
    }// </editor-fold>//GEN-END:initComponents
    public void clearData() {
        DefaultTableModel model = (DefaultTableModel) jStkAdjust.getModel();
        model.getDataVector().removeAllElements();
        jStkAdjust.revalidate();        
        lblActualStk.setText("0.00");
        lblAdjustedStk.setText("0.00");
        lblPhysicalStk.setText("0.00");
        lblTotalRecords.setText("");
        txtStkSearch.requestFocus();
    }
    
     public void addRow() {
        DefaultTableModel model = (DefaultTableModel) jStkAdjust.getModel();
        Vector datas = new Vector();
        for (int i = 0; i < jStkAdjust.getModel().getColumnCount(); i++) {
            datas.addElement(null);            
        }
        model.insertRow(jStkAdjust.getRowCount(), datas);
    }
    
    
    private void btnSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMouseClicked
        displayStkValues();
    }//GEN-LAST:event_btnSearchMouseClicked
    private void calcTotal () {
        double totActualStk=0.00;
        double totPhysicalStk=0.00;
        double totAdjStk=0.00;
        for(int i=0; i < jStkAdjust.getRowCount();i++) {
            totActualStk+=Double.parseDouble(""+jStkAdjust.getModel().getValueAt(i,8));
            totPhysicalStk+=Double.parseDouble(""+jStkAdjust.getModel().getValueAt(i,9));
            totAdjStk+=Double.parseDouble(""+jStkAdjust.getModel().getValueAt(i,10));
        }
        lblActualStk.setText(""+Value.Round(totActualStk));
        lblPhysicalStk.setText(""+Value.Round(totPhysicalStk));
        lblAdjustedStk.setText(""+Value.Round(totAdjStk));
    }

    private void stopEditingRows() {
        if (jStkAdjust.getCellEditor() != null)
            jStkAdjust.getCellEditor().stopCellEditing();
    }

    private void setValues(int selectedRow) {
        if(selectedRow!=-1 && jStkAdjust.getModel().getValueAt(selectedRow,6)!=null && !jStkAdjust.getModel().getValueAt(selectedRow,6).toString().equals("null")) {
                Validation valid = new Validation();
                String physicalStk = ""+jStkAdjust.getModel().getValueAt(selectedRow,6);
                if(Integer.parseInt(physicalStk) < 0) {
                    JOptionPane.showMessageDialog(rootPane,"Physical Stock cannot be less than zero");
                    jStkAdjust.getModel().setValueAt(0, jStkAdjust.getSelectedRow(),6);
                }
                else if(valid.getDecimalValid(physicalStk, 1, 10) == 10) {
                    int adjStk = Integer.parseInt(physicalStk)-Integer.parseInt(jStkAdjust.getModel().getValueAt(selectedRow,5).toString());
                    Double physicalStkAmt = Integer.parseInt(physicalStk)*Double.parseDouble(jStkAdjust.getModel().getValueAt(selectedRow,12).toString());
                    Double actualStkAmt = adjStk*Double.parseDouble(jStkAdjust.getModel().getValueAt(selectedRow,12).toString());
                    jStkAdjust.getModel().setValueAt(adjStk, jStkAdjust.getSelectedRow(),7);
                    jStkAdjust.getModel().setValueAt(physicalStkAmt, jStkAdjust.getSelectedRow(),9);
                    jStkAdjust.getModel().setValueAt(actualStkAmt, jStkAdjust.getSelectedRow(),10);
                    calcTotal();
                }
            }
    }
    
    private void jStkAdjustKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jStkAdjustKeyPressed
        int i=jStkAdjust.getSelectedRow();
        int j=jStkAdjust.getSelectedColumn();        
        if((evt.getKeyCode()==KeyEvent.VK_ENTER || evt.getKeyCode()==KeyEvent.VK_TAB) && jStkAdjust.getSelectedColumn()==6) {            
            stopEditingRows();            
            setValues(jStkAdjust.getSelectedRow());
          }
          else if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
          }
          else if(evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                if (jStkAdjust.getModel().isCellEditable(i,j)) {
                        jStkAdjust.getModel().setValueAt("", i, j);
                }
          }
          else {
                char c = evt.getKeyChar();
                if(i!=-1 && jStkAdjust.getModel().isCellEditable(i, j)) {
                    if((c>'0' && c<='9'))
                    jStkAdjust.getModel().setValueAt(0, i, j);
               }
          }          
    }//GEN-LAST:event_jStkAdjustKeyPressed

    private void btnSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSearchKeyPressed
        displayStkValues();
    }//GEN-LAST:event_btnSearchKeyPressed

    private void cmbSearchBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSearchBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_cmbSearchBoxKeyPressed

    private void txtStkSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStkSearchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_txtStkSearchKeyPressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        saveStockAdjustment();
    }//GEN-LAST:event_jButton1MouseClicked
    private void saveStockAdjustment() {
        try {
        stopEditingRows();
        setValues(jStkAdjust.getSelectedRow());
        StockModel model;
        Stock stockController= (Stock) RegistryFactory.getClientStub(RegistryConstants.Stock);
        ArrayList<StockModel> stockAdjustmentList = new ArrayList<StockModel>();
        if(jStkAdjust.getRowCount()==0) {
            JOptionPane.showMessageDialog(rootPane, "No records to update");
        }
        else {
             int insertRecord=0;
             for(int i=0;i<jStkAdjust.getRowCount();i++) {
                if(jStkAdjust.getValueAt(i, 6)!=null && !jStkAdjust.getValueAt(i, 6).toString().equals("")) {
                    int actStk = Integer.parseInt(""+jStkAdjust.getValueAt(i, 5));
                    int physicalStk = Integer.parseInt(""+jStkAdjust.getValueAt(i, 6));
                    if(actStk != physicalStk) {
                    model = new StockModel();
                    model.setStock_itemCode(Integer.parseInt(""+jStkAdjust.getValueAt(i, 0)));
                    model.setStock_itemName(""+jStkAdjust.getValueAt(i, 1));
                    model.setStock_formulation(""+jStkAdjust.getValueAt(i, 2));
                    model.setStock_batchNo(""+jStkAdjust.getValueAt(i, 3));
                    model.setStock_expiryDate(""+jStkAdjust.getValueAt(i, 4));
                    model.setStock_qty(actStk);
                    model.setPhysicalStock(physicalStk);
                    model.setActualStockvalue(Double.parseDouble(""+jStkAdjust.getValueAt(i, 8)));
                    model.setPhysicalStockvalue(Double.parseDouble(""+jStkAdjust.getValueAt(i, 9)));
                    model.setRemarks(jStkAdjust.getValueAt(i, 11)==null ? "":jStkAdjust.getValueAt(i, 11).toString());
                    stockAdjustmentList.add(model);
                    insertRecord=1;
                    }
                }
            }
            if(insertRecord==1) {
                int flag=stockController.insertStockAdjustment(stockAdjustmentList);
                if(flag==1) {
                    Alert.inform("Sales Cash", "Data Saved Successfully");
                    clearData();
                    txtStkSearch.setText("");
                }
            }
            else {
                Alert.inform("Sales Cash", "Physical stock values are either empty or unchanged. Please modify.");
            }
        }
        }
        catch(Exception e) {
            String msg = "Class : StockAdjustment  Method : saveStockAdjustment  Exception: " + e.getMessage();
            log.debug(msg);
            e.printStackTrace();
        }
    }
    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
       saveStockAdjustment();
    }//GEN-LAST:event_jButton1KeyPressed

    private void displayStkValues() {
        // TODO add your handling code here:
        String name = txtStkSearch.getText();
        Double totalAmt = 0.00;
        Integer producttype = cmbSearchBox.getSelectedIndex();
        try {
        Stock stockController= (Stock) RegistryFactory.getClientStub(RegistryConstants.Stock);
        if (name == null || name.trim().length() < 0) {
            JOptionPane.showMessageDialog(rootPane,"Please Enter Search Value");
            txtStkSearch.requestFocus();
        } else if (producttype < 0) {
            JOptionPane.showMessageDialog(rootPane,"Please Select Search Type ");
            cmbSearchBox.requestFocus();
        } else {
            StockModel stockBean = new StockModel();
            Validation valid = new Validation();
            ArrayList<StockModel> stockList=new ArrayList();
            if (producttype == 0) {
                stockBean.setPassValue(2);
                stockBean.setStock_itemName(name);
                stockList=stockController.viewAllRecord(stockBean);
            } else if (producttype == 1){
                stockBean.setPassValue(3);
                if(valid.getNumberValid(name, 1, 10)==10)
                stockBean.setStock_itemCode(Integer.valueOf(name));
                stockList=stockController.viewAllRecord(stockBean);
            }
            else if (producttype == 2){
                stockBean.setPassValue(4);
                stockBean.setStock_batchNo(name);
                stockList=stockController.viewAllRecord(stockBean);
            }
            else if (producttype == 3){
                stockBean.setPassValue(5);
                stockBean.setStock_qty(Integer.valueOf(name));
                stockList=stockController.viewAllRecord(stockBean);
            }
            clearData();            
            for (int i = 0; i < stockList.size(); i++) {
                addRow();
                stockBean = stockList.get(i);
                jStkAdjust.getModel().setValueAt(String.valueOf(stockBean.getStock_itemCode()),i, 0);
                jStkAdjust.getModel().setValueAt(stockBean.getStock_itemName()+ "_" + stockBean.getDosage(), i, 1);
                jStkAdjust.getModel().setValueAt(stockBean.getStock_formulation(), i, 2);
                jStkAdjust.getModel().setValueAt(stockBean.getStock_batchNo(), i, 3);
                jStkAdjust.getModel().setValueAt(stockBean.getStock_expiryDate(), i, 4);
                jStkAdjust.getModel().setValueAt(stockBean.getStock_qty(), i, 5);
                jStkAdjust.getModel().setValueAt(stockBean.getStock_qty(), i, 6);
                jStkAdjust.getModel().setValueAt(0, i, 7);
                jStkAdjust.getModel().setValueAt((stockBean.getStock_qty()*stockBean.getStock_mrp()),i,8);
                jStkAdjust.getModel().setValueAt((stockBean.getStock_qty()*stockBean.getStock_mrp()),i,9);
                jStkAdjust.getModel().setValueAt(0.00,i,10);
                jStkAdjust.getModel().setValueAt((stockBean.getStock_mrp()),i,12);
                totalAmt+=(stockBean.getStock_qty()*stockBean.getStock_mrp());
            }
            lblActualStk.setText(""+Value.Round(totalAmt));
            lblPhysicalStk.setText(""+Value.Round(totalAmt));
            lblAdjustedStk.setText("0.00");
            lblTotalRecords.setText(jStkAdjust.getRowCount()+" Records Found");
            jStkAdjust.clearSelection();
        }
        }
        catch(Exception e) {
            String msg = "Class : StockAdjustment  Method : displayStkValues  Exception: " + e.getMessage();
            log.debug(msg);
            e.printStackTrace();
        }
    }
    /**
    * @param args the command line arguments
    */   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cmbSearchBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jStkAdjust;
    private javax.swing.JLabel lblActualStk;
    private javax.swing.JLabel lblAdjustedStk;
    private javax.swing.JLabel lblPhysicalStk;
    private javax.swing.JLabel lblTotalRecords;
    private javax.swing.JTextField txtStkSearch;
    // End of variables declaration//GEN-END:variables
}
